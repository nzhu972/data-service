apiVersion: v1
kind: Template
parameters:
  - name: APPLICATION_NAME
  - name: PROJECT_NAMESPACE
  - name: DB_NAME
  - name: DB_USERNAME
  - name: DB_PASSWORD
  - name: DB_ADMIN_PASSWORD
objects:
########################################
############    POSTGRES    ############
########################################
  - apiVersion: v1
    kind: Secret
    metadata:
      name: pg-user-credentials
      namespace: ${PROJECT_NAMESPACE}
      labels:
        app: ${APPLICATION_NAME}
    type: Opaque
    stringData:
      POSTGRESQL_DATABASE: ${DB_NAME}
      POSTGRESQL_USER: ${DB_USERNAME}
      POSTGRESQL_PASSWORD: ${DB_PASSWORD}
      POSTGRESQL_ADMIN_PASSWORD: ${DB_ADMIN_PASSWORD}
# PG Persistent Volume
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${APPLICATION_NAME}-pg-pvc
      namespace: ${PROJECT_NAMESPACE}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
# PG Service
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}-pg-svc
      namespace: ${PROJECT_NAMESPACE}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        - name: target-tcp-port
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}-pg-dc
    status:
      loadBalancer: {}
# PG Deployment Config
# TODO: Look into using StatefulSet instead of DeploymentConfig
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}-pg-dc
      namespace: ${PROJECT_NAMESPACE}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}-pg-dc
      strategy:
        type: Rolling
        resources: {}
        rollingParams:
          updatePeriodSeconds: 5
          intervalSeconds: 5
          timeoutSeconds: 180
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}-pg-dc
        spec:
          triggers:
            - type: ConfigChange
          containers:
            - image: docker-registry.default.svc:5000/openshift/postgresql:9.4
              name: postgresdb
              env:
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: pg-user-credentials
                      key: POSTGRESQL_DATABASE
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: pg-user-credentials
                      key: POSTGRESQL_USER
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: pg-user-credentials
                      key: POSTGRESQL_PASSWORD
                - name: POSTGRESQL_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: pg-user-credentials
                      key: POSTGRESQL_ADMIN_PASSWORD
              ports:
                - containerPort: 5432
#              livenessProbe:
#                initialDelaySeconds: 45
#                timeoutSeconds: 2
#                exec:
#                  command: ["psql -wc 'SELECT 1'"]
#              readinessProbe:
#                initialDelaySeconds: 15
#                timeoutSeconds: 2
#                exec:
#                  command: ["psql -wc 'SELECT 1'"]
          volumes:
            - name: pg-data
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}-pg-pvc
########################################
############  DATA SERVICE  ############
########################################

# DS Service
  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}-ds-svc
      namespace: ${PROJECT_NAMESPACE}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      ports:
        - name: target-tcp-port
          targetPort: 9000
          port: 80
          protocol: TCP
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}-dataservice
    status:
      loadBalancer: {}

# DS Route
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APPLICATION_NAME}-ds-route
      namespace: ${PROJECT_NAMESPACE}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      port:
        targetPort: target-tcp-port
      to:
        kind: Service
        name: ${APPLICATION_NAME}-ds-svc
# DS Deployment Config
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}-dataservice
      namespace: ${PROJECT_NAMESPACE}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}-dataservice
      strategy:
        type: Rolling
        resources: {}
        rollingParams:
          updatePeriodSeconds: 5
          intervalSeconds: 5
          timeoutSeconds: 180
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}-dataservice
        spec:
          triggers:
            - type: ConfigChange
          imagePullSecrets:
            - name: philip-malware-dataservice-pulltoken-pull-secret
          containers:
            - image: quay-enterprise-quay-enterprise.ocp.nvsconsulting.io/philip/malware-data-service
              name: data-service
              ports:
                - containerPort: 9000
