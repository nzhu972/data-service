package com.malware.application;

import static org.junit.Assert.assertEquals;

import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWithRouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.spring.CamelSpringBootRunner;
import org.apache.camel.test.spring.EnableRouteCoverage;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.malware.application.DataServiceApplication;
/**
 * JUnit test cases to validate each route defined in DataServiceAutoConfiguration
 * 
 * @author Nevin Zhu
 * @version 1.0
 * @since 2020-5-7
 *
 */
@RunWith(CamelSpringBootRunner.class)
@SpringBootTest(classes={DataServiceApplication.class})
@EnableRouteCoverage
public class SplitSubmissionFilesTest {
	
	@EndpointInject(uri = MOCK_RESULT)
    private MockEndpoint resultEndpoint;
 
	@EndpointInject(uri = AMQ_MOCK_RESULT)
    private MockEndpoint amqResultEndpoint;
	
    @Autowired
    private CamelContext camelContext;
 
    @EndpointInject(uri = ROUTE_START)
    private ProducerTemplate producer;
 
    private static final String MOCK_RESULT = "mock:SplitFilesResult";
    private static final String AMQ_MOCK_RESULT = "mock:AMQResult";
    private static final String ROUTE_START = "direct:split-submission-files";
 
    /*
     * This method is used to start camel context and weave in the mock endpoint 
     * at the end of the route so the result can be retrieved by the unit test
     */
    @Before
    public void setup() throws Exception {
 
        camelContext.getRouteDefinition("split-submission-files")
                .autoStartup(true)
                .adviceWith(camelContext, new AdviceWithRouteBuilder() {
                    @Override
                    public void configure() throws Exception {
                        weaveAddLast().to(MOCK_RESULT);
                        interceptSendToEndpoint("direct:send-to-msgbroker").skipSendToOriginalEndpoint().to(AMQ_MOCK_RESULT);
                    }
                });
    }
    
    /*
     * This is the unit test case for building submission record quest payload. 
     */
    @Test
    public void buildSubmissionRecordTwoFilesRequestTest() throws Exception {
    	
    	String inputData = "{  \"submission_data\": {"
         + "\"first_name\": \"Joe\"," 
         + "\"last_name\": \"Bob\","   
         + "\"phone_number\": \"123-456-7890\","   
         + "\"organization\": \"raytheon\","   
         + "\"email\": \"joeblow@example.com\","   
         + "\"ip\": \"123.56.789.1\"  }, "  
         + "\"file_paths\":" 
         + "[   \"/mng/eicar/PDF_TEST_FILE.pdf\", \"/mng/eicar/PDF_TEST_FILE2.pdf\", \"/mng/eicar/PDF_TEST_FILE3.pdf\" ]}";
         
    	String expectedResult = "{  \"submission_data\": {"
    	         + "\"first_name\": \"Joe\"," 
    	         + "\"last_name\": \"Bob\","   
    	         + "\"phone_number\": \"123-456-7890\","   
    	         + "\"organization\": \"raytheon\","   
    	         + "\"email\": \"joeblow@example.com\","   
    	         + "\"ip\": \"123.56.789.1\"  }, "  
    	         + "\"file_paths\":" 
    	         + "[   \"/mng/eicar/PDF_TEST_FILE.pdf\" ]}";

   
        resultEndpoint.expectedMessageCount(1);
        amqResultEndpoint.expectedMessageCount(2);
        producer.sendBody(inputData);

        // Before comparing JSON content, let's remove all white spaces and carriage returns
        String actualResult = resultEndpoint.getExchanges().get(0).getIn().getBody().toString().replaceAll("\\n", "").replaceAll("\\s", "");
        expectedResult = expectedResult.replaceAll("\\s", "");
        
        // Validate the content of the payload is same and their length is same
        assertEquals(expectedResult, actualResult);
        assertEquals(expectedResult.length(), actualResult.length());
        resultEndpoint.assertIsSatisfied();
        amqResultEndpoint.assertIsSatisfied();

    }
    
}
