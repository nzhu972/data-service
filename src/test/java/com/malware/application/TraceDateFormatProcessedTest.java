package com.malware.application;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWithRouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.spring.CamelSpringBootRunner;
import org.apache.camel.test.spring.EnableRouteCoverage;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@RunWith(CamelSpringBootRunner.class)
@SpringBootTest(classes={DataServiceApplication.class})
@EnableRouteCoverage
public class TraceDateFormatProcessedTest {

    private static final String MOCK_RESULT = "mock:testTraceEndpoint";
    private static final String ROUTE_START = "direct:handle-trace-event";
    private static final String JDBC_MOCK_RESULT = "mock:jdbcInsert";

    @EndpointInject(uri = MOCK_RESULT)
    private MockEndpoint resultEndpoint;

    @EndpointInject(uri = JDBC_MOCK_RESULT)
    private MockEndpoint jdbcResultEndpoint;

    @Autowired
    private CamelContext camelContext;

    @EndpointInject(uri = ROUTE_START)
    private ProducerTemplate producer;

    private boolean isSetup = false;

    @Before
    public void setup() throws Exception {

        camelContext.getRouteDefinition("trace-events")
            .autoStartup(true)
            .adviceWith(camelContext, new AdviceWithRouteBuilder() {
                @Override
                public void configure() {
                    weaveAddLast().to(MOCK_RESULT);
                    interceptSendToEndpoint("jdbc:datasource?useHeadersAsParameters=true").skipSendToOriginalEndpoint().to(JDBC_MOCK_RESULT);
                }
            });

    }
    
    @Test
    public void testDatesProcessed() throws Exception {
        
        String inputData = ("{\"ProcessInstanceId\":\"23\",\"TimeStamp\":\"2020-06-24T09:47:28.84\",\"EventActionType\":\"BeforeProcessStarted\","
            + "\"Process\":{\"Name\":\"other-process\",\"Node\":null},\"TraceEventType\":\"ProcessTraceEvent\"}");

        resultEndpoint.expectedMessageCount(1);
        producer.sendBody(inputData);

        String processInstanceId = resultEndpoint.getExchanges().get(0).getIn().getHeader("processInstanceId", String.class);
        String processName = resultEndpoint.getExchanges().get(0).getIn().getHeader("processName", String.class);
        String timestamp = resultEndpoint.getExchanges().get(0).getIn().getHeader("eventTimestamp", String.class);
        String nodeState = resultEndpoint.getExchanges().get(0).getIn().getHeader("nodeState", String.class);
        String nodeName = resultEndpoint.getExchanges().get(0).getIn().getHeader("nodeName", String.class);
        String nodeStartedOn = resultEndpoint.getExchanges().get(0).getIn().getHeader("nodeStartedOn", String.class);
        String nodeCompletedOn = resultEndpoint.getExchanges().get(0).getIn().getHeader("nodeCompletedOn", String.class);

        assertEquals("23", processInstanceId);
        assertEquals("other-process", processName);
        assertEquals("2020-06-24 09:47:28", timestamp);
        assertNull(nodeName);
        assertNull(nodeStartedOn);
        assertNull(nodeCompletedOn);
        assertNull(nodeState);

        resultEndpoint.assertIsSatisfied();
    }

}
