package com.malware.application;

import static org.junit.Assert.assertEquals;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWithRouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.spring.CamelSpringBootRunner;
import org.apache.camel.test.spring.EnableRouteCoverage;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.malware.application.DataServiceApplication;

/**
 * JUnit test cases to validate each route defined in DataServiceAutoConfiguration
 * 
 * @author Nevin Zhu
 * @version 1.0
 * @since 2020-5-7
 *
 */
@RunWith(CamelSpringBootRunner.class)
@SpringBootTest(classes={DataServiceApplication.class})
@EnableRouteCoverage
public class BuildDropFileReqTest {
	
	@EndpointInject(uri = MOCK_RESULT)
    private MockEndpoint resultEndpoint;
 
    @Autowired
    private CamelContext camelContext;
 
    @EndpointInject(uri = ROUTE_START)
    private ProducerTemplate producer;
 
    private static final String MOCK_RESULT = "mock:BuildDropFileRecord";
    private static final String ROUTE_START = "direct:build-transaction-record";
 
    /*
     * This method is used to start camel context and weave in the mock endpoint 
     * at the end of the route so the result can be retrieved by the unit test
     */
    @Before
    public void setup() throws Exception {
 
        camelContext.getRouteDefinition("build-transaction-record")
                .autoStartup(true)
                .adviceWith(camelContext, new AdviceWithRouteBuilder() {
                    @Override
                    public void configure() throws Exception {
                        weaveAddLast().to(MOCK_RESULT);
                    }
                });
    }
    
    /*
     * This is the unit test case for build transaction record request payload. 
     */
    @Test
    public void buildBuildCreateTransactionRequestPayloadTest() throws Exception {
        
        String inputData = "{ \"moveFileResp\": { \"errors\" :[ ],\"file_info\" : [{\"new_file_name\":\"23423423423\",\"original_file_name\":\"virus_2.exe\",\"path\":\"/mng/20200214\"}]} , \"reqPayload\": {\n"
        + "\"sid\": \"273486c2-4a7e-4365-bab9-5194abdc32b2\",\n"
        + "\"location\": \"/mng/dev/scotty/uploads/\",\n" 
        + "\"name\": \"DHS881618_virus_1.exe\",\n"   
        + "\"pid\": \"20200214150245.021.000010\",\n"   
        + "\"level\": \"1\",\n"   
        + "\"drop_file_pid\": \"20200214150245.021.000123\",\n"   
        + "\"drop_file_level\": \"1\"\n}}";
        
         
    	String expectedResult = "{"
								   +"\"transaction_file\":"
								   +"["
								     +"{"
								     	 +"\"submission_id\":\"3080\","
								     	 +"\"sid\":\"10200319180344.001363.022.9876543\","
								         +"\"tid\":\"20200319180344.001363.022.9876543\","
								         +"\"level\":\"0\","
								         +"\"location\":\"/mng/20200214\","
                                         +"\"name\":\"23423423423\","
                                         +"\"drop_file_pid\": \"20200214150245.021.000123\","
                                         +"\"drop_file_level\":\"1\""
								     +"}"
								   +"]"							
								+"}";

    	Map<String, Object> headers = new HashMap<String, Object>();
    	headers.put("h_tid", "20200319180344.001363.022.9876543");
    	headers.put("h_sid", "10200319180344.001363.022.9876543");
    	headers.put("h_level", "0");
    	headers.put("h_submission_id", "3080");
    	
        resultEndpoint.expectedMessageCount(1);
        
        producer.sendBodyAndHeaders(inputData, headers);

        // Before comparing JSON content, let's remove all white spaces and carriage returns
        String actualResult = resultEndpoint.getExchanges().get(0).getIn().getBody().toString().replaceAll("\\n", "").replaceAll("\\s", "");
        expectedResult = expectedResult.replaceAll("\\s", "");
        
        // Validate the content of the payload is same and their length is same
        assertEquals(expectedResult, actualResult);
        assertEquals(expectedResult.length(), actualResult.length());
        resultEndpoint.assertIsSatisfied();

    }    
}
