package com.malware;

import static org.junit.Assert.assertEquals;

import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWithRouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.spring.CamelSpringBootRunner;
import org.apache.camel.test.spring.EnableRouteCoverage;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.malware.application.DataServiceApplication;

/**
 * JUnit test cases to validate each route defined in DataServiceAutoConfiguration
 * 
 * @author Nevin Zhu
 * @version 1.0
 * @since 2020-5-7
 *
 */
@RunWith(CamelSpringBootRunner.class)
@SpringBootTest(classes={DataServiceApplication.class})
@EnableRouteCoverage
public class BuildMetadataReqTest {
	
	@EndpointInject(uri = MOCK_RESULT)
    private MockEndpoint resultEndpoint;
 
    @Autowired
    private CamelContext camelContext;
 
    @EndpointInject(uri = ROUTE_START)
    private ProducerTemplate producer;
 
    private static final String MOCK_RESULT = "mock:buildMetadataResult";
    private static final String ROUTE_START = "direct:build-metadata";
 
    /*
     * This method is used to start camel context and weave in the mock endpoint 
     * at the end of the route so the result can be retrieved by the unit test
     */
    @Before
    public void setup() throws Exception {
 
        camelContext.getRouteDefinition("build-metadata")
                .autoStartup(true)
                .adviceWith(camelContext, new AdviceWithRouteBuilder() {
                    @Override
                    public void configure() throws Exception {
                        weaveAddLast().to(MOCK_RESULT);
                    }
                });
    }
    
    /*
     * This is the unit test case for build Metadata request payload. 
     */
    @Test
    public void buildBuildMetadataRequestPayloadTest() throws Exception {
    	
    	String inputData = "{\"results\": ["
						       +"{"
						            +"\"file_name\": \"virus_1.exe\","
						                 +" \"md5\": \"3242432234\","
						                  +"\"sha1\": \"23423423423\","
						                 +" \"sha256\": \"23424324\","
						                 +" \"sha512\": \"2342342342\","
						                  +"\"ssdeep\": \"3adfsdfasd\""
						        +"}"
						    +"]"
						    +"}";
         
    	String expectedResult = "{\"file_metadata\" :"
						            +"[" 
							          +"{\"tid\":\"20200319180344.001363.022.9876543\","
							          + "\"md5\":\"3242432234\","
							          + "\"sha1\":\"23423423423\","
							          + "\"sha256\":\"23424324\","
							          +  "\"sha512\":\"2342342342\","
							          +  "\"ssdeep\":\"3adfsdfasd\""
							          + "}"
							        +"]"
    							+"}";

    	String CAMEL_HEADER_NAME = "h_tid";
    	String CAMEL_HEADER_VALUE = "20200319180344.001363.022.9876543";
    	
        resultEndpoint.expectedMessageCount(1);
        
        producer.sendBodyAndHeader(inputData, CAMEL_HEADER_NAME, CAMEL_HEADER_VALUE);

        // Before comparing JSON content, let's remove all white spaces and carriage returns
        String actualResult = resultEndpoint.getExchanges().get(0).getIn().getBody().toString().replaceAll("\\n", "").replaceAll("\\s", "");
        expectedResult = expectedResult.replaceAll("\\s", "");
        
        // Validate the content of the payload is same and their length is same
        assertEquals(expectedResult, actualResult);
        assertEquals(expectedResult.length(), actualResult.length());
        resultEndpoint.assertIsSatisfied();

    }    
}
